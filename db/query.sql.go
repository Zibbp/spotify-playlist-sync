// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addTrackToPlaylist = `-- name: AddTrackToPlaylist :exec
INSERT INTO playlist_tracks (playlist_id, track_id)
VALUES (?, ?)
`

type AddTrackToPlaylistParams struct {
	PlaylistID sql.NullString
	TrackID    sql.NullString
}

func (q *Queries) AddTrackToPlaylist(ctx context.Context, arg AddTrackToPlaylistParams) error {
	_, err := q.db.ExecContext(ctx, addTrackToPlaylist, arg.PlaylistID, arg.TrackID)
	return err
}

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (id)
VALUES (?)
RETURNING id
`

func (q *Queries) CreatePlaylist(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist, id)
	err := row.Scan(&id)
	return id, err
}

const getPlaylistById = `-- name: GetPlaylistById :one
SELECT id FROM playlists
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlaylistById(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistById, id)
	err := row.Scan(&id)
	return id, err
}

const getPlaylistTracks = `-- name: GetPlaylistTracks :many
SELECT playlist_id, track_id, added_at FROM playlist_tracks
WHERE playlist_id = ?
`

func (q *Queries) GetPlaylistTracks(ctx context.Context, playlistID sql.NullString) ([]PlaylistTrack, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistTracks, playlistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaylistTrack
	for rows.Next() {
		var i PlaylistTrack
		if err := rows.Scan(&i.PlaylistID, &i.TrackID, &i.AddedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrackById = `-- name: GetTrackById :one
SELECT id FROM tracks
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTrackById(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getTrackById, id)
	err := row.Scan(&id)
	return id, err
}
