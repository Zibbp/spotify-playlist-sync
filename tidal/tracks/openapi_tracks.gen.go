// Package tidal_tracks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package tidal_tracks

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Authorization_Code_PKCEScopes = "Authorization_Code_PKCE.Scopes"
	Client_CredentialsScopes      = "Client_Credentials.Scopes"
)

// Defines values for AlbumsAttributesAvailability.
const (
	AlbumsAttributesAvailabilityDJ     AlbumsAttributesAvailability = "DJ"
	AlbumsAttributesAvailabilitySTEM   AlbumsAttributesAvailability = "STEM"
	AlbumsAttributesAvailabilitySTREAM AlbumsAttributesAvailability = "STREAM"
)

// Defines values for AlbumsAttributesType.
const (
	ALBUM  AlbumsAttributesType = "ALBUM"
	EP     AlbumsAttributesType = "EP"
	SINGLE AlbumsAttributesType = "SINGLE"
)

// Defines values for ArtistsAttributesRoles.
const (
	ARTIST         ArtistsAttributesRoles = "ARTIST"
	ENGINEER       ArtistsAttributesRoles = "ENGINEER"
	MISC           ArtistsAttributesRoles = "MISC"
	PERFORMER      ArtistsAttributesRoles = "PERFORMER"
	PRODUCER       ArtistsAttributesRoles = "PRODUCER"
	PRODUCTIONTEAM ArtistsAttributesRoles = "PRODUCTION_TEAM"
	SONGWRITER     ArtistsAttributesRoles = "SONGWRITER"
)

// Defines values for ExternalLinkMetaType.
const (
	FACEBOOK             ExternalLinkMetaType = "FACEBOOK"
	HOMEPAGE             ExternalLinkMetaType = "HOMEPAGE"
	INSTAGRAM            ExternalLinkMetaType = "INSTAGRAM"
	SNAPCHAT             ExternalLinkMetaType = "SNAPCHAT"
	TIDALAUTOPLAYANDROID ExternalLinkMetaType = "TIDAL_AUTOPLAY_ANDROID"
	TIDALAUTOPLAYIOS     ExternalLinkMetaType = "TIDAL_AUTOPLAY_IOS"
	TIDALAUTOPLAYWEB     ExternalLinkMetaType = "TIDAL_AUTOPLAY_WEB"
	TIDALSHARING         ExternalLinkMetaType = "TIDAL_SHARING"
	TIKTOK               ExternalLinkMetaType = "TIKTOK"
	TWITTER              ExternalLinkMetaType = "TWITTER"
)

// Defines values for TracksAttributesAvailability.
const (
	TracksAttributesAvailabilityDJ     TracksAttributesAvailability = "DJ"
	TracksAttributesAvailabilitySTEM   TracksAttributesAvailability = "STEM"
	TracksAttributesAvailabilitySTREAM TracksAttributesAvailability = "STREAM"
)

// Defines values for VideosAttributesAvailability.
const (
	DJ     VideosAttributesAvailability = "DJ"
	STEM   VideosAttributesAvailability = "STEM"
	STREAM VideosAttributesAvailability = "STREAM"
)

// AlbumsAttributes defines model for Albums_Attributes.
type AlbumsAttributes struct {
	// Availability Defines an album availability e.g. for streaming, DJs, stems
	Availability *[]AlbumsAttributesAvailability `json:"availability,omitempty"`

	// BarcodeId Barcode id (EAN-13 or UPC-A)
	BarcodeId string `json:"barcodeId"`

	// Copyright Copyright information
	Copyright *string `json:"copyright,omitempty"`

	// Duration Duration (ISO-8601)
	Duration string `json:"duration"`

	// Explicit Indicates whether an album consist of any explicit content
	Explicit bool `json:"explicit"`

	// ExternalLinks Represents available links to something that is related to an album resource, but external to the TIDAL API
	ExternalLinks *[]CatalogueItemExternalLink `json:"externalLinks,omitempty"`

	// ImageLinks Represents available links to, and metadata about, an album cover images
	ImageLinks *[]CatalogueItemImageLink `json:"imageLinks,omitempty"`
	MediaTags  []string                  `json:"mediaTags"`

	// NumberOfItems Number of album items
	NumberOfItems int32 `json:"numberOfItems"`

	// NumberOfVolumes Number of volumes
	NumberOfVolumes int32 `json:"numberOfVolumes"`

	// Popularity Album popularity (ranged in 0.00 ... 1.00). Conditionally visible
	Popularity float64 `json:"popularity"`

	// ReleaseDate Release date (ISO-8601)
	ReleaseDate *openapi_types.Date `json:"releaseDate,omitempty"`

	// Title Original title
	Title string `json:"title"`

	// Type Album type, e.g. single, regular album, or extended play
	Type AlbumsAttributesType `json:"type"`

	// VideoLinks Represents available links to, and metadata about, an album cover videos
	VideoLinks *[]CatalogueItemVideoLink `json:"videoLinks,omitempty"`
}

// AlbumsAttributesAvailability defines model for AlbumsAttributes.Availability.
type AlbumsAttributesAvailability string

// AlbumsAttributesType Album type, e.g. single, regular album, or extended play
type AlbumsAttributesType string

// AlbumsItemsMultiDataRelationshipDocument defines model for Albums_Items_Multi_Data_Relationship_Document.
type AlbumsItemsMultiDataRelationshipDocument struct {
	Data *[]AlbumsItemsResourceIdentifier `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// AlbumsItemsResourceIdentifier Resource identifier JSON:API object
type AlbumsItemsResourceIdentifier struct {
	// Id resource unique identifier
	Id   string                             `json:"id"`
	Meta *AlbumsItemsResourceIdentifierMeta `json:"meta,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// AlbumsItemsResourceIdentifierMeta defines model for Albums_Items_Resource_Identifier_Meta.
type AlbumsItemsResourceIdentifierMeta struct {
	// TrackNumber track number
	TrackNumber int32 `json:"trackNumber"`

	// VolumeNumber volume number
	VolumeNumber int32 `json:"volumeNumber"`
}

// AlbumsMultiDataDocument defines model for Albums_Multi_Data_Document.
type AlbumsMultiDataDocument struct {
	Data     *[]AlbumsResource                        `json:"data,omitempty"`
	Included *[]AlbumsMultiDataDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// AlbumsMultiDataDocument_Included_Item defines model for Albums_Multi_Data_Document.included.Item.
type AlbumsMultiDataDocument_Included_Item struct {
	union json.RawMessage
}

// AlbumsMultiDataRelationshipDocument defines model for Albums_Multi_Data_Relationship_Document.
type AlbumsMultiDataRelationshipDocument struct {
	Data     *[]ResourceIdentifier                                `json:"data,omitempty"`
	Included *[]AlbumsMultiDataRelationshipDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// AlbumsMultiDataRelationshipDocument_Included_Item defines model for Albums_Multi_Data_Relationship_Document.included.Item.
type AlbumsMultiDataRelationshipDocument_Included_Item struct {
	union json.RawMessage
}

// AlbumsRelationships defines model for Albums_Relationships.
type AlbumsRelationships struct {
	Artists       MultiDataRelationshipDoc                 `json:"artists"`
	Items         AlbumsItemsMultiDataRelationshipDocument `json:"items"`
	Providers     MultiDataRelationshipDoc                 `json:"providers"`
	SimilarAlbums MultiDataRelationshipDoc                 `json:"similarAlbums"`
}

// AlbumsResource defines model for Albums_Resource.
type AlbumsResource struct {
	Attributes *AlbumsAttributes `json:"attributes,omitempty"`

	// Id resource unique identifier
	Id string `json:"id"`

	// Links Links JSON:API object
	Links         *Links               `json:"links,omitempty"`
	Relationships *AlbumsRelationships `json:"relationships,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// AlbumsSingleDataDocument defines model for Albums_Single_Data_Document.
type AlbumsSingleDataDocument struct {
	Data     *AlbumsResource                           `json:"data,omitempty"`
	Included *[]AlbumsSingleDataDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// AlbumsSingleDataDocument_Included_Item defines model for Albums_Single_Data_Document.included.Item.
type AlbumsSingleDataDocument_Included_Item struct {
	union json.RawMessage
}

// ArtistRolesAttributes defines model for ArtistRoles_Attributes.
type ArtistRolesAttributes struct {
	Name *string `json:"name,omitempty"`
}

// ArtistRolesMultiDataDocument defines model for ArtistRoles_Multi_Data_Document.
type ArtistRolesMultiDataDocument struct {
	Data *[]ArtistRolesResource `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ArtistRolesResource defines model for ArtistRoles_Resource.
type ArtistRolesResource struct {
	Attributes *ArtistRolesAttributes `json:"attributes,omitempty"`

	// Id resource unique identifier
	Id string `json:"id"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// ArtistRolesSingleDataDocument defines model for ArtistRoles_Single_Data_Document.
type ArtistRolesSingleDataDocument struct {
	Data *ArtistRolesResource `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ArtistsAttributes defines model for Artists_Attributes.
type ArtistsAttributes struct {
	// ExternalLinks Represents available links to something that is related to an artist resource, but external to the TIDAL API
	ExternalLinks *[]CatalogueItemExternalLink `json:"externalLinks,omitempty"`

	// ImageLinks Represents available links to, and metadata about, an artist images
	ImageLinks *[]CatalogueItemImageLink `json:"imageLinks,omitempty"`

	// Name Artist name
	Name string `json:"name"`

	// Popularity Artist popularity (ranged in 0.00 ... 1.00). Conditionally visible
	Popularity float64 `json:"popularity"`

	// Roles Artist roles
	Roles *[]ArtistsAttributesRoles `json:"roles,omitempty"`
}

// ArtistsAttributesRoles defines model for ArtistsAttributes.Roles.
type ArtistsAttributesRoles string

// ArtistsMultiDataDocument defines model for Artists_Multi_Data_Document.
type ArtistsMultiDataDocument struct {
	Data     *[]ArtistsResource                        `json:"data,omitempty"`
	Included *[]ArtistsMultiDataDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ArtistsMultiDataDocument_Included_Item defines model for Artists_Multi_Data_Document.included.Item.
type ArtistsMultiDataDocument_Included_Item struct {
	union json.RawMessage
}

// ArtistsMultiDataRelationshipDocument defines model for Artists_Multi_Data_Relationship_Document.
type ArtistsMultiDataRelationshipDocument struct {
	Data     *[]ResourceIdentifier                                 `json:"data,omitempty"`
	Included *[]ArtistsMultiDataRelationshipDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ArtistsMultiDataRelationshipDocument_Included_Item defines model for Artists_Multi_Data_Relationship_Document.included.Item.
type ArtistsMultiDataRelationshipDocument_Included_Item struct {
	union json.RawMessage
}

// ArtistsRelationships defines model for Artists_Relationships.
type ArtistsRelationships struct {
	Albums         MultiDataRelationshipDoc                           `json:"albums"`
	Radio          MultiDataRelationshipDoc                           `json:"radio"`
	Roles          MultiDataRelationshipDoc                           `json:"roles"`
	SimilarArtists MultiDataRelationshipDoc                           `json:"similarArtists"`
	TrackProviders ArtistsTrackProvidersMultiDataRelationshipDocument `json:"trackProviders"`
	Tracks         MultiDataRelationshipDoc                           `json:"tracks"`
	Videos         MultiDataRelationshipDoc                           `json:"videos"`
}

// ArtistsResource defines model for Artists_Resource.
type ArtistsResource struct {
	Attributes *ArtistsAttributes `json:"attributes,omitempty"`

	// Id resource unique identifier
	Id string `json:"id"`

	// Links Links JSON:API object
	Links         *Links                `json:"links,omitempty"`
	Relationships *ArtistsRelationships `json:"relationships,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// ArtistsSingleDataDocument defines model for Artists_Single_Data_Document.
type ArtistsSingleDataDocument struct {
	Data     *ArtistsResource                           `json:"data,omitempty"`
	Included *[]ArtistsSingleDataDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ArtistsSingleDataDocument_Included_Item defines model for Artists_Single_Data_Document.included.Item.
type ArtistsSingleDataDocument_Included_Item struct {
	union json.RawMessage
}

// ArtistsTrackProvidersMultiDataRelationshipDocument defines model for Artists_TrackProviders_Multi_Data_Relationship_Document.
type ArtistsTrackProvidersMultiDataRelationshipDocument struct {
	Data *[]ArtistsTrackProvidersResourceIdentifier `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ArtistsTrackProvidersResourceIdentifier Resource identifier JSON:API object
type ArtistsTrackProvidersResourceIdentifier struct {
	// Id resource unique identifier
	Id   string                                       `json:"id"`
	Meta *ArtistsTrackProvidersResourceIdentifierMeta `json:"meta,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// ArtistsTrackProvidersResourceIdentifierMeta defines model for Artists_TrackProviders_Resource_Identifier_Meta.
type ArtistsTrackProvidersResourceIdentifierMeta struct {
	// NumberOfTracks total number of tracks released together with the provider
	NumberOfTracks int64 `json:"numberOfTracks"`
}

// CatalogueItemExternalLink defines model for Catalogue_Item_External_Link.
type CatalogueItemExternalLink struct {
	// Href link to something that is related to a resource
	Href string `json:"href"`

	// Meta metadata about an external link
	Meta ExternalLinkMeta `json:"meta"`
}

// CatalogueItemImageLink defines model for Catalogue_Item_Image_Link.
type CatalogueItemImageLink struct {
	// Href link to an image
	Href string `json:"href"`

	// Meta metadata about an image
	Meta ImageLinkMeta `json:"meta"`
}

// CatalogueItemVideoLink defines model for Catalogue_Item_Video_Link.
type CatalogueItemVideoLink struct {
	// Href link to a video
	Href string `json:"href"`

	// Meta metadata about a video
	Meta VideoLinkMeta `json:"meta"`
}

// ErrorDocument JSON:API error document object
type ErrorDocument struct {
	// Errors array of error objects
	Errors *[]ErrorObject `json:"errors,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ErrorObject JSON:API error object
type ErrorObject struct {
	// Code application-specific error code
	Code *string `json:"code,omitempty"`

	// Detail human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Id unique identifier for this particular occurrence of the problem
	Id *string `json:"id,omitempty"`

	// Source object containing references to the primary source of the error
	Source *ErrorObjectSource `json:"source,omitempty"`

	// Status HTTP status code applicable to this problem
	Status *string `json:"status,omitempty"`
}

// ErrorObjectSource object containing references to the primary source of the error
type ErrorObjectSource struct {
	// Header string indicating the name of a single request header which caused the error
	Header *string `json:"header,omitempty"`

	// Parameter string indicating which URI query parameter caused the error.
	Parameter *string `json:"parameter,omitempty"`

	// Pointer a JSON Pointer [RFC6901] to the value in the request document that caused the error
	Pointer *string `json:"pointer,omitempty"`
}

// ExternalLinkMeta metadata about an external link
type ExternalLinkMeta struct {
	// Type external link type
	Type ExternalLinkMetaType `json:"type"`
}

// ExternalLinkMetaType external link type
type ExternalLinkMetaType string

// ImageLinkMeta metadata about an image
type ImageLinkMeta struct {
	// Height image height (in pixels)
	Height int32 `json:"height"`

	// Width image width (in pixels)
	Width int32 `json:"width"`
}

// Links Links JSON:API object
type Links struct {
	// Next the next page of data (pagination)
	Next *string `json:"next,omitempty"`

	// Self the link that generated the current response document
	Self string `json:"self"`
}

// MultiDataRelationshipDoc defines model for Multi_Data_Relationship_Doc.
type MultiDataRelationshipDoc struct {
	Data *[]ResourceIdentifier `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// PlaylistsAttributes defines model for Playlists_Attributes.
type PlaylistsAttributes struct {
	// Bounded Indicates if the playlist has a duration and set number of tracks
	Bounded bool `json:"bounded"`

	// CreatedAt Datetime of playlist creation (ISO 8601)
	CreatedAt time.Time `json:"createdAt"`

	// Description Playlist description
	Description *string `json:"description,omitempty"`

	// Duration Duration of the playlist expressed in accordance with ISO 8601
	Duration *string `json:"duration,omitempty"`

	// ExternalLinks Sharing links to the playlist
	ExternalLinks []PlaylistsExternalLink `json:"externalLinks"`

	// ImageLinks Images associated with the playlist
	ImageLinks []PlaylistsImageLink `json:"imageLinks"`

	// LastModifiedAt Datetime of last modification of the playlist (ISO 8601)
	LastModifiedAt time.Time `json:"lastModifiedAt"`

	// Name Playlist name
	Name string `json:"name"`

	// NumberOfItems Number of items in the playlist
	NumberOfItems *int32 `json:"numberOfItems,omitempty"`

	// PlaylistType The type of the playlist
	PlaylistType string `json:"playlistType"`

	// Privacy Privacy setting of the playlist
	Privacy string `json:"privacy"`
}

// PlaylistsExternalLink Sharing links to the playlist
type PlaylistsExternalLink struct {
	// Href link to something that is related to a resource
	Href string `json:"href"`

	// Meta metadata about an external link
	Meta ExternalLinkMeta `json:"meta"`
}

// PlaylistsImageLink Images associated with the playlist
type PlaylistsImageLink struct {
	// Href link to an image
	Href string `json:"href"`

	// Meta metadata about an image
	Meta *ImageLinkMeta `json:"meta,omitempty"`
}

// PlaylistsItemsMultiDataRelationshipDocument defines model for Playlists_Items_Multi_Data_Relationship_Document.
type PlaylistsItemsMultiDataRelationshipDocument struct {
	Data *[]PlaylistsItemsResourceIdentifier `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// PlaylistsItemsResourceIdentifier Resource identifier JSON:API object
type PlaylistsItemsResourceIdentifier struct {
	// Id resource unique identifier
	Id   string                                `json:"id"`
	Meta *PlaylistsItemsResourceIdentifierMeta `json:"meta,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// PlaylistsItemsResourceIdentifierMeta defines model for Playlists_Items_Resource_Identifier_Meta.
type PlaylistsItemsResourceIdentifierMeta struct {
	// AddedAt When the item was added to the playlist
	AddedAt *time.Time `json:"addedAt,omitempty"`

	// ItemId Unique identifier of the item in a playlist
	ItemId *string `json:"itemId,omitempty"`
}

// PlaylistsRelationships defines model for Playlists_Relationships.
type PlaylistsRelationships struct {
	Items  PlaylistsItemsMultiDataRelationshipDocument `json:"items"`
	Owners MultiDataRelationshipDoc                    `json:"owners"`
}

// PlaylistsResource defines model for Playlists_Resource.
type PlaylistsResource struct {
	Attributes *PlaylistsAttributes `json:"attributes,omitempty"`

	// Id resource unique identifier
	Id string `json:"id"`

	// Links Links JSON:API object
	Links         *Links                  `json:"links,omitempty"`
	Relationships *PlaylistsRelationships `json:"relationships,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// ProvidersAttributes defines model for Providers_Attributes.
type ProvidersAttributes struct {
	// Name Provider name. Conditionally visible.
	Name string `json:"name"`
}

// ProvidersMultiDataDocument defines model for Providers_Multi_Data_Document.
type ProvidersMultiDataDocument struct {
	Data *[]ProvidersResource `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ProvidersResource defines model for Providers_Resource.
type ProvidersResource struct {
	Attributes *ProvidersAttributes `json:"attributes,omitempty"`

	// Id resource unique identifier
	Id string `json:"id"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// ProvidersSingleDataDocument defines model for Providers_Single_Data_Document.
type ProvidersSingleDataDocument struct {
	Data *ProvidersResource `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// ResourceObjectObject defines model for ResourceObjectObject.
type ResourceObjectObject struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// Id resource unique identifier
	Id string `json:"id"`

	// Links Links JSON:API object
	Links         *Links                  `json:"links,omitempty"`
	Relationships *map[string]interface{} `json:"relationships,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// ResourceIdentifier Resource identifier JSON:API object
type ResourceIdentifier struct {
	// Id resource unique identifier
	Id string `json:"id"`

	// Type resource unique type
	Type string `json:"type"`
}

// SingletonDataRelationshipDoc defines model for Singleton_Data_Relationship_Doc.
type SingletonDataRelationshipDoc struct {
	// Data Resource identifier JSON:API object
	Data *ResourceIdentifier `json:"data,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// TracksAttributes defines model for Tracks_Attributes.
type TracksAttributes struct {
	// Availability Defines a catalog item availability e.g. for streaming, DJs, stems
	Availability *[]TracksAttributesAvailability `json:"availability,omitempty"`

	// Copyright Copyright information
	Copyright *string `json:"copyright,omitempty"`

	// Duration Duration expressed in accordance with ISO 8601
	Duration string `json:"duration"`

	// Explicit Indicates whether a catalog item consist of any explicit content
	Explicit bool `json:"explicit"`

	// ExternalLinks Represents available links to something that is related to a catalog item, but external to the TIDAL API
	ExternalLinks *[]CatalogueItemExternalLink `json:"externalLinks,omitempty"`

	// Isrc ISRC code
	Isrc      string   `json:"isrc"`
	MediaTags []string `json:"mediaTags"`

	// Popularity Track or video popularity (ranged in 0.00 ... 1.00). Conditionally visible
	Popularity float64 `json:"popularity"`

	// Title Album item's title
	Title string `json:"title"`

	// Version Version of the album's item; complements title
	Version *string `json:"version,omitempty"`
}

// TracksAttributesAvailability defines model for TracksAttributes.Availability.
type TracksAttributesAvailability string

// TracksMultiDataDocument defines model for Tracks_Multi_Data_Document.
type TracksMultiDataDocument struct {
	Data     *[]TracksResource                        `json:"data,omitempty"`
	Included *[]TracksMultiDataDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// TracksMultiDataDocument_Included_Item defines model for Tracks_Multi_Data_Document.included.Item.
type TracksMultiDataDocument_Included_Item struct {
	union json.RawMessage
}

// TracksMultiDataRelationshipDocument defines model for Tracks_Multi_Data_Relationship_Document.
type TracksMultiDataRelationshipDocument struct {
	Data     *[]ResourceIdentifier                                `json:"data,omitempty"`
	Included *[]TracksMultiDataRelationshipDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// TracksMultiDataRelationshipDocument_Included_Item defines model for Tracks_Multi_Data_Relationship_Document.included.Item.
type TracksMultiDataRelationshipDocument_Included_Item struct {
	union json.RawMessage
}

// TracksRelationships defines model for Tracks_Relationships.
type TracksRelationships struct {
	Albums        MultiDataRelationshipDoc `json:"albums"`
	Artists       MultiDataRelationshipDoc `json:"artists"`
	Providers     MultiDataRelationshipDoc `json:"providers"`
	Radio         MultiDataRelationshipDoc `json:"radio"`
	SimilarTracks MultiDataRelationshipDoc `json:"similarTracks"`
}

// TracksResource defines model for Tracks_Resource.
type TracksResource struct {
	Attributes *TracksAttributes `json:"attributes,omitempty"`

	// Id resource unique identifier
	Id string `json:"id"`

	// Links Links JSON:API object
	Links         *Links               `json:"links,omitempty"`
	Relationships *TracksRelationships `json:"relationships,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// TracksSingleDataDocument defines model for Tracks_Single_Data_Document.
type TracksSingleDataDocument struct {
	Data     *TracksResource                           `json:"data,omitempty"`
	Included *[]TracksSingleDataDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// TracksSingleDataDocument_Included_Item defines model for Tracks_Single_Data_Document.included.Item.
type TracksSingleDataDocument_Included_Item struct {
	union json.RawMessage
}

// VideoLinkMeta metadata about a video
type VideoLinkMeta struct {
	// Height video height (in pixels)
	Height int32 `json:"height"`

	// Width video width (in pixels)
	Width int32 `json:"width"`
}

// VideosAttributes defines model for Videos_Attributes.
type VideosAttributes struct {
	// Availability Defines a catalog item availability e.g. for streaming, DJs, stems
	Availability *[]VideosAttributesAvailability `json:"availability,omitempty"`

	// Copyright Copyright information
	Copyright *string `json:"copyright,omitempty"`

	// Duration Duration expressed in accordance with ISO 8601
	Duration string `json:"duration"`

	// Explicit Indicates whether a catalog item consist of any explicit content
	Explicit bool `json:"explicit"`

	// ExternalLinks Represents available links to something that is related to a catalog item, but external to the TIDAL API
	ExternalLinks *[]CatalogueItemExternalLink `json:"externalLinks,omitempty"`

	// ImageLinks Represents available links to, and metadata about, an album item images
	ImageLinks *[]CatalogueItemImageLink `json:"imageLinks,omitempty"`

	// Isrc ISRC code
	Isrc string `json:"isrc"`

	// Popularity Track or video popularity (ranged in 0.00 ... 1.00). Conditionally visible
	Popularity float64 `json:"popularity"`

	// ReleaseDate Release date (ISO-8601)
	ReleaseDate *openapi_types.Date `json:"releaseDate,omitempty"`

	// Title Album item's title
	Title string `json:"title"`

	// Version Version of the album's item; complements title
	Version *string `json:"version,omitempty"`
}

// VideosAttributesAvailability defines model for VideosAttributes.Availability.
type VideosAttributesAvailability string

// VideosMultiDataDocument defines model for Videos_Multi_Data_Document.
type VideosMultiDataDocument struct {
	Data     *[]VideosResource                        `json:"data,omitempty"`
	Included *[]VideosMultiDataDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// VideosMultiDataDocument_Included_Item defines model for Videos_Multi_Data_Document.included.Item.
type VideosMultiDataDocument_Included_Item struct {
	union json.RawMessage
}

// VideosMultiDataRelationshipDocument defines model for Videos_Multi_Data_Relationship_Document.
type VideosMultiDataRelationshipDocument struct {
	Data     *[]ResourceIdentifier                                `json:"data,omitempty"`
	Included *[]VideosMultiDataRelationshipDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// VideosMultiDataRelationshipDocument_Included_Item defines model for Videos_Multi_Data_Relationship_Document.included.Item.
type VideosMultiDataRelationshipDocument_Included_Item struct {
	union json.RawMessage
}

// VideosRelationships defines model for Videos_Relationships.
type VideosRelationships struct {
	Albums    MultiDataRelationshipDoc `json:"albums"`
	Artists   MultiDataRelationshipDoc `json:"artists"`
	Providers MultiDataRelationshipDoc `json:"providers"`
}

// VideosResource defines model for Videos_Resource.
type VideosResource struct {
	Attributes *VideosAttributes `json:"attributes,omitempty"`

	// Id resource unique identifier
	Id string `json:"id"`

	// Links Links JSON:API object
	Links         *Links               `json:"links,omitempty"`
	Relationships *VideosRelationships `json:"relationships,omitempty"`

	// Type resource unique type
	Type string `json:"type"`
}

// VideosSingleDataDocument defines model for Videos_Single_Data_Document.
type VideosSingleDataDocument struct {
	Data     *VideosResource                           `json:"data,omitempty"`
	Included *[]VideosSingleDataDocument_Included_Item `json:"included,omitempty"`

	// Links Links JSON:API object
	Links *Links `json:"links,omitempty"`
}

// VideosSingleDataDocument_Included_Item defines model for Videos_Single_Data_Document.included.Item.
type VideosSingleDataDocument_Included_Item struct {
	union json.RawMessage
}

// GetAlbumsParams defines parameters for GetAlbums.
type GetAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists, items, providers, similarAlbums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterBarcodeId Allows to filter the collection of resources based on barcodeId attribute value
	FilterBarcodeId *[]string `form:"filter[barcodeId],omitempty" json:"filter[barcodeId],omitempty"`

	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetAlbumsIdParams defines parameters for GetAlbumsId.
type GetAlbumsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists, items, providers, similarAlbums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetAlbumsIdRelationshipsArtistsParams defines parameters for GetAlbumsIdRelationshipsArtists.
type GetAlbumsIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetAlbumsIdRelationshipsItemsParams defines parameters for GetAlbumsIdRelationshipsItems.
type GetAlbumsIdRelationshipsItemsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: items
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetAlbumsIdRelationshipsProvidersParams defines parameters for GetAlbumsIdRelationshipsProviders.
type GetAlbumsIdRelationshipsProvidersParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: providers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetAlbumsIdRelationshipsSimilarAlbumsParams defines parameters for GetAlbumsIdRelationshipsSimilarAlbums.
type GetAlbumsIdRelationshipsSimilarAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: similarAlbums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistRolesParams defines parameters for GetArtistRoles.
type GetArtistRolesParams struct {
	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetArtistsParams defines parameters for GetArtists.
type GetArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, radio, roles, similarArtists, trackProviders, tracks, videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetArtistsIdParams defines parameters for GetArtistsId.
type GetArtistsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, radio, roles, similarArtists, trackProviders, tracks, videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsAlbumsParams defines parameters for GetArtistsIdRelationshipsAlbums.
type GetArtistsIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsRadioParams defines parameters for GetArtistsIdRelationshipsRadio.
type GetArtistsIdRelationshipsRadioParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: radio
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsRolesParams defines parameters for GetArtistsIdRelationshipsRoles.
type GetArtistsIdRelationshipsRolesParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: roles
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsSimilarArtistsParams defines parameters for GetArtistsIdRelationshipsSimilarArtists.
type GetArtistsIdRelationshipsSimilarArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: similarArtists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsTrackProvidersParams defines parameters for GetArtistsIdRelationshipsTrackProviders.
type GetArtistsIdRelationshipsTrackProvidersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: trackProviders
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsTracksParams defines parameters for GetArtistsIdRelationshipsTracks.
type GetArtistsIdRelationshipsTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// CollapseBy Collapse by options for getting artist tracks. Available options: FINGERPRINT, ID. FINGERPRINT option might collapse similar tracks based item fingerprints while collapsing by ID always returns all available items
	CollapseBy string `form:"collapseBy" json:"collapseBy"`

	// Include Allows the client to customize which related resources should be returned. Available options: tracks
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsVideosParams defines parameters for GetArtistsIdRelationshipsVideos.
type GetArtistsIdRelationshipsVideosParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetProvidersParams defines parameters for GetProviders.
type GetProvidersParams struct {
	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetTracksParams defines parameters for GetTracks.
type GetTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, providers, radio, similarTracks
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterIsrc Allows to filter the collection of resources based on isrc attribute value
	FilterIsrc *[]string `form:"filter[isrc],omitempty" json:"filter[isrc],omitempty"`

	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetTracksIdParams defines parameters for GetTracksId.
type GetTracksIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, providers, radio, similarTracks
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetTracksIdRelationshipsAlbumsParams defines parameters for GetTracksIdRelationshipsAlbums.
type GetTracksIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsArtistsParams defines parameters for GetTracksIdRelationshipsArtists.
type GetTracksIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsProvidersParams defines parameters for GetTracksIdRelationshipsProviders.
type GetTracksIdRelationshipsProvidersParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: providers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsRadioParams defines parameters for GetTracksIdRelationshipsRadio.
type GetTracksIdRelationshipsRadioParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: radio
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsSimilarTracksParams defines parameters for GetTracksIdRelationshipsSimilarTracks.
type GetTracksIdRelationshipsSimilarTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: similarTracks
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetVideosParams defines parameters for GetVideos.
type GetVideosParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, providers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterIsrc Allows to filter the collection of resources based on isrc attribute value
	FilterIsrc *[]string `form:"filter[isrc],omitempty" json:"filter[isrc],omitempty"`

	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetVideosIdParams defines parameters for GetVideosId.
type GetVideosIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, providers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetVideosIdRelationshipsAlbumsParams defines parameters for GetVideosIdRelationshipsAlbums.
type GetVideosIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetVideosIdRelationshipsArtistsParams defines parameters for GetVideosIdRelationshipsArtists.
type GetVideosIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetVideosIdRelationshipsProvidersParams defines parameters for GetVideosIdRelationshipsProviders.
type GetVideosIdRelationshipsProvidersParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: providers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// AsArtistsResource returns the union data inside the AlbumsMultiDataDocument_Included_Item as a ArtistsResource
func (t AlbumsMultiDataDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the AlbumsMultiDataDocument_Included_Item as the provided ArtistsResource
func (t *AlbumsMultiDataDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the AlbumsMultiDataDocument_Included_Item, using the provided ArtistsResource
func (t *AlbumsMultiDataDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the AlbumsMultiDataDocument_Included_Item as a AlbumsResource
func (t AlbumsMultiDataDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the AlbumsMultiDataDocument_Included_Item as the provided AlbumsResource
func (t *AlbumsMultiDataDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the AlbumsMultiDataDocument_Included_Item, using the provided AlbumsResource
func (t *AlbumsMultiDataDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTracksResource returns the union data inside the AlbumsMultiDataDocument_Included_Item as a TracksResource
func (t AlbumsMultiDataDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the AlbumsMultiDataDocument_Included_Item as the provided TracksResource
func (t *AlbumsMultiDataDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the AlbumsMultiDataDocument_Included_Item, using the provided TracksResource
func (t *AlbumsMultiDataDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVideosResource returns the union data inside the AlbumsMultiDataDocument_Included_Item as a VideosResource
func (t AlbumsMultiDataDocument_Included_Item) AsVideosResource() (VideosResource, error) {
	var body VideosResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideosResource overwrites any union data inside the AlbumsMultiDataDocument_Included_Item as the provided VideosResource
func (t *AlbumsMultiDataDocument_Included_Item) FromVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideosResource performs a merge with any union data inside the AlbumsMultiDataDocument_Included_Item, using the provided VideosResource
func (t *AlbumsMultiDataDocument_Included_Item) MergeVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the AlbumsMultiDataDocument_Included_Item as a ProvidersResource
func (t AlbumsMultiDataDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the AlbumsMultiDataDocument_Included_Item as the provided ProvidersResource
func (t *AlbumsMultiDataDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the AlbumsMultiDataDocument_Included_Item, using the provided ProvidersResource
func (t *AlbumsMultiDataDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AlbumsMultiDataDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AlbumsMultiDataDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArtistsResource returns the union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as a ArtistsResource
func (t AlbumsMultiDataRelationshipDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as the provided ArtistsResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item, using the provided ArtistsResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as a AlbumsResource
func (t AlbumsMultiDataRelationshipDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as the provided AlbumsResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item, using the provided AlbumsResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTracksResource returns the union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as a TracksResource
func (t AlbumsMultiDataRelationshipDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as the provided TracksResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item, using the provided TracksResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVideosResource returns the union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as a VideosResource
func (t AlbumsMultiDataRelationshipDocument_Included_Item) AsVideosResource() (VideosResource, error) {
	var body VideosResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideosResource overwrites any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as the provided VideosResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) FromVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideosResource performs a merge with any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item, using the provided VideosResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) MergeVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as a ProvidersResource
func (t AlbumsMultiDataRelationshipDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item as the provided ProvidersResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the AlbumsMultiDataRelationshipDocument_Included_Item, using the provided ProvidersResource
func (t *AlbumsMultiDataRelationshipDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AlbumsMultiDataRelationshipDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AlbumsMultiDataRelationshipDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArtistsResource returns the union data inside the AlbumsSingleDataDocument_Included_Item as a ArtistsResource
func (t AlbumsSingleDataDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the AlbumsSingleDataDocument_Included_Item as the provided ArtistsResource
func (t *AlbumsSingleDataDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the AlbumsSingleDataDocument_Included_Item, using the provided ArtistsResource
func (t *AlbumsSingleDataDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the AlbumsSingleDataDocument_Included_Item as a AlbumsResource
func (t AlbumsSingleDataDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the AlbumsSingleDataDocument_Included_Item as the provided AlbumsResource
func (t *AlbumsSingleDataDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the AlbumsSingleDataDocument_Included_Item, using the provided AlbumsResource
func (t *AlbumsSingleDataDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTracksResource returns the union data inside the AlbumsSingleDataDocument_Included_Item as a TracksResource
func (t AlbumsSingleDataDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the AlbumsSingleDataDocument_Included_Item as the provided TracksResource
func (t *AlbumsSingleDataDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the AlbumsSingleDataDocument_Included_Item, using the provided TracksResource
func (t *AlbumsSingleDataDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVideosResource returns the union data inside the AlbumsSingleDataDocument_Included_Item as a VideosResource
func (t AlbumsSingleDataDocument_Included_Item) AsVideosResource() (VideosResource, error) {
	var body VideosResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideosResource overwrites any union data inside the AlbumsSingleDataDocument_Included_Item as the provided VideosResource
func (t *AlbumsSingleDataDocument_Included_Item) FromVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideosResource performs a merge with any union data inside the AlbumsSingleDataDocument_Included_Item, using the provided VideosResource
func (t *AlbumsSingleDataDocument_Included_Item) MergeVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the AlbumsSingleDataDocument_Included_Item as a ProvidersResource
func (t AlbumsSingleDataDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the AlbumsSingleDataDocument_Included_Item as the provided ProvidersResource
func (t *AlbumsSingleDataDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the AlbumsSingleDataDocument_Included_Item, using the provided ProvidersResource
func (t *AlbumsSingleDataDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AlbumsSingleDataDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AlbumsSingleDataDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArtistsResource returns the union data inside the ArtistsMultiDataDocument_Included_Item as a ArtistsResource
func (t ArtistsMultiDataDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the ArtistsMultiDataDocument_Included_Item as the provided ArtistsResource
func (t *ArtistsMultiDataDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the ArtistsMultiDataDocument_Included_Item, using the provided ArtistsResource
func (t *ArtistsMultiDataDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTracksResource returns the union data inside the ArtistsMultiDataDocument_Included_Item as a TracksResource
func (t ArtistsMultiDataDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the ArtistsMultiDataDocument_Included_Item as the provided TracksResource
func (t *ArtistsMultiDataDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the ArtistsMultiDataDocument_Included_Item, using the provided TracksResource
func (t *ArtistsMultiDataDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the ArtistsMultiDataDocument_Included_Item as a ProvidersResource
func (t ArtistsMultiDataDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the ArtistsMultiDataDocument_Included_Item as the provided ProvidersResource
func (t *ArtistsMultiDataDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the ArtistsMultiDataDocument_Included_Item, using the provided ProvidersResource
func (t *ArtistsMultiDataDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistRolesResource returns the union data inside the ArtistsMultiDataDocument_Included_Item as a ArtistRolesResource
func (t ArtistsMultiDataDocument_Included_Item) AsArtistRolesResource() (ArtistRolesResource, error) {
	var body ArtistRolesResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistRolesResource overwrites any union data inside the ArtistsMultiDataDocument_Included_Item as the provided ArtistRolesResource
func (t *ArtistsMultiDataDocument_Included_Item) FromArtistRolesResource(v ArtistRolesResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistRolesResource performs a merge with any union data inside the ArtistsMultiDataDocument_Included_Item, using the provided ArtistRolesResource
func (t *ArtistsMultiDataDocument_Included_Item) MergeArtistRolesResource(v ArtistRolesResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaylistsResource returns the union data inside the ArtistsMultiDataDocument_Included_Item as a PlaylistsResource
func (t ArtistsMultiDataDocument_Included_Item) AsPlaylistsResource() (PlaylistsResource, error) {
	var body PlaylistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaylistsResource overwrites any union data inside the ArtistsMultiDataDocument_Included_Item as the provided PlaylistsResource
func (t *ArtistsMultiDataDocument_Included_Item) FromPlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaylistsResource performs a merge with any union data inside the ArtistsMultiDataDocument_Included_Item, using the provided PlaylistsResource
func (t *ArtistsMultiDataDocument_Included_Item) MergePlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the ArtistsMultiDataDocument_Included_Item as a AlbumsResource
func (t ArtistsMultiDataDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the ArtistsMultiDataDocument_Included_Item as the provided AlbumsResource
func (t *ArtistsMultiDataDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the ArtistsMultiDataDocument_Included_Item, using the provided AlbumsResource
func (t *ArtistsMultiDataDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVideosResource returns the union data inside the ArtistsMultiDataDocument_Included_Item as a VideosResource
func (t ArtistsMultiDataDocument_Included_Item) AsVideosResource() (VideosResource, error) {
	var body VideosResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideosResource overwrites any union data inside the ArtistsMultiDataDocument_Included_Item as the provided VideosResource
func (t *ArtistsMultiDataDocument_Included_Item) FromVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideosResource performs a merge with any union data inside the ArtistsMultiDataDocument_Included_Item, using the provided VideosResource
func (t *ArtistsMultiDataDocument_Included_Item) MergeVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArtistsMultiDataDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArtistsMultiDataDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArtistsResource returns the union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as a ArtistsResource
func (t ArtistsMultiDataRelationshipDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as the provided ArtistsResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item, using the provided ArtistsResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTracksResource returns the union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as a TracksResource
func (t ArtistsMultiDataRelationshipDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as the provided TracksResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item, using the provided TracksResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as a ProvidersResource
func (t ArtistsMultiDataRelationshipDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as the provided ProvidersResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item, using the provided ProvidersResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistRolesResource returns the union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as a ArtistRolesResource
func (t ArtistsMultiDataRelationshipDocument_Included_Item) AsArtistRolesResource() (ArtistRolesResource, error) {
	var body ArtistRolesResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistRolesResource overwrites any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as the provided ArtistRolesResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) FromArtistRolesResource(v ArtistRolesResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistRolesResource performs a merge with any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item, using the provided ArtistRolesResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) MergeArtistRolesResource(v ArtistRolesResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaylistsResource returns the union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as a PlaylistsResource
func (t ArtistsMultiDataRelationshipDocument_Included_Item) AsPlaylistsResource() (PlaylistsResource, error) {
	var body PlaylistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaylistsResource overwrites any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as the provided PlaylistsResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) FromPlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaylistsResource performs a merge with any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item, using the provided PlaylistsResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) MergePlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as a AlbumsResource
func (t ArtistsMultiDataRelationshipDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as the provided AlbumsResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item, using the provided AlbumsResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVideosResource returns the union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as a VideosResource
func (t ArtistsMultiDataRelationshipDocument_Included_Item) AsVideosResource() (VideosResource, error) {
	var body VideosResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideosResource overwrites any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item as the provided VideosResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) FromVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideosResource performs a merge with any union data inside the ArtistsMultiDataRelationshipDocument_Included_Item, using the provided VideosResource
func (t *ArtistsMultiDataRelationshipDocument_Included_Item) MergeVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArtistsMultiDataRelationshipDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArtistsMultiDataRelationshipDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArtistsResource returns the union data inside the ArtistsSingleDataDocument_Included_Item as a ArtistsResource
func (t ArtistsSingleDataDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the ArtistsSingleDataDocument_Included_Item as the provided ArtistsResource
func (t *ArtistsSingleDataDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the ArtistsSingleDataDocument_Included_Item, using the provided ArtistsResource
func (t *ArtistsSingleDataDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTracksResource returns the union data inside the ArtistsSingleDataDocument_Included_Item as a TracksResource
func (t ArtistsSingleDataDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the ArtistsSingleDataDocument_Included_Item as the provided TracksResource
func (t *ArtistsSingleDataDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the ArtistsSingleDataDocument_Included_Item, using the provided TracksResource
func (t *ArtistsSingleDataDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the ArtistsSingleDataDocument_Included_Item as a ProvidersResource
func (t ArtistsSingleDataDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the ArtistsSingleDataDocument_Included_Item as the provided ProvidersResource
func (t *ArtistsSingleDataDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the ArtistsSingleDataDocument_Included_Item, using the provided ProvidersResource
func (t *ArtistsSingleDataDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistRolesResource returns the union data inside the ArtistsSingleDataDocument_Included_Item as a ArtistRolesResource
func (t ArtistsSingleDataDocument_Included_Item) AsArtistRolesResource() (ArtistRolesResource, error) {
	var body ArtistRolesResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistRolesResource overwrites any union data inside the ArtistsSingleDataDocument_Included_Item as the provided ArtistRolesResource
func (t *ArtistsSingleDataDocument_Included_Item) FromArtistRolesResource(v ArtistRolesResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistRolesResource performs a merge with any union data inside the ArtistsSingleDataDocument_Included_Item, using the provided ArtistRolesResource
func (t *ArtistsSingleDataDocument_Included_Item) MergeArtistRolesResource(v ArtistRolesResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaylistsResource returns the union data inside the ArtistsSingleDataDocument_Included_Item as a PlaylistsResource
func (t ArtistsSingleDataDocument_Included_Item) AsPlaylistsResource() (PlaylistsResource, error) {
	var body PlaylistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaylistsResource overwrites any union data inside the ArtistsSingleDataDocument_Included_Item as the provided PlaylistsResource
func (t *ArtistsSingleDataDocument_Included_Item) FromPlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaylistsResource performs a merge with any union data inside the ArtistsSingleDataDocument_Included_Item, using the provided PlaylistsResource
func (t *ArtistsSingleDataDocument_Included_Item) MergePlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the ArtistsSingleDataDocument_Included_Item as a AlbumsResource
func (t ArtistsSingleDataDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the ArtistsSingleDataDocument_Included_Item as the provided AlbumsResource
func (t *ArtistsSingleDataDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the ArtistsSingleDataDocument_Included_Item, using the provided AlbumsResource
func (t *ArtistsSingleDataDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVideosResource returns the union data inside the ArtistsSingleDataDocument_Included_Item as a VideosResource
func (t ArtistsSingleDataDocument_Included_Item) AsVideosResource() (VideosResource, error) {
	var body VideosResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideosResource overwrites any union data inside the ArtistsSingleDataDocument_Included_Item as the provided VideosResource
func (t *ArtistsSingleDataDocument_Included_Item) FromVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideosResource performs a merge with any union data inside the ArtistsSingleDataDocument_Included_Item, using the provided VideosResource
func (t *ArtistsSingleDataDocument_Included_Item) MergeVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArtistsSingleDataDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArtistsSingleDataDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTracksResource returns the union data inside the TracksMultiDataDocument_Included_Item as a TracksResource
func (t TracksMultiDataDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the TracksMultiDataDocument_Included_Item as the provided TracksResource
func (t *TracksMultiDataDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the TracksMultiDataDocument_Included_Item, using the provided TracksResource
func (t *TracksMultiDataDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistsResource returns the union data inside the TracksMultiDataDocument_Included_Item as a ArtistsResource
func (t TracksMultiDataDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the TracksMultiDataDocument_Included_Item as the provided ArtistsResource
func (t *TracksMultiDataDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the TracksMultiDataDocument_Included_Item, using the provided ArtistsResource
func (t *TracksMultiDataDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the TracksMultiDataDocument_Included_Item as a AlbumsResource
func (t TracksMultiDataDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the TracksMultiDataDocument_Included_Item as the provided AlbumsResource
func (t *TracksMultiDataDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the TracksMultiDataDocument_Included_Item, using the provided AlbumsResource
func (t *TracksMultiDataDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the TracksMultiDataDocument_Included_Item as a ProvidersResource
func (t TracksMultiDataDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the TracksMultiDataDocument_Included_Item as the provided ProvidersResource
func (t *TracksMultiDataDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the TracksMultiDataDocument_Included_Item, using the provided ProvidersResource
func (t *TracksMultiDataDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaylistsResource returns the union data inside the TracksMultiDataDocument_Included_Item as a PlaylistsResource
func (t TracksMultiDataDocument_Included_Item) AsPlaylistsResource() (PlaylistsResource, error) {
	var body PlaylistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaylistsResource overwrites any union data inside the TracksMultiDataDocument_Included_Item as the provided PlaylistsResource
func (t *TracksMultiDataDocument_Included_Item) FromPlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaylistsResource performs a merge with any union data inside the TracksMultiDataDocument_Included_Item, using the provided PlaylistsResource
func (t *TracksMultiDataDocument_Included_Item) MergePlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TracksMultiDataDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TracksMultiDataDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTracksResource returns the union data inside the TracksMultiDataRelationshipDocument_Included_Item as a TracksResource
func (t TracksMultiDataRelationshipDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the TracksMultiDataRelationshipDocument_Included_Item as the provided TracksResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the TracksMultiDataRelationshipDocument_Included_Item, using the provided TracksResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistsResource returns the union data inside the TracksMultiDataRelationshipDocument_Included_Item as a ArtistsResource
func (t TracksMultiDataRelationshipDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the TracksMultiDataRelationshipDocument_Included_Item as the provided ArtistsResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the TracksMultiDataRelationshipDocument_Included_Item, using the provided ArtistsResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the TracksMultiDataRelationshipDocument_Included_Item as a AlbumsResource
func (t TracksMultiDataRelationshipDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the TracksMultiDataRelationshipDocument_Included_Item as the provided AlbumsResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the TracksMultiDataRelationshipDocument_Included_Item, using the provided AlbumsResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the TracksMultiDataRelationshipDocument_Included_Item as a ProvidersResource
func (t TracksMultiDataRelationshipDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the TracksMultiDataRelationshipDocument_Included_Item as the provided ProvidersResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the TracksMultiDataRelationshipDocument_Included_Item, using the provided ProvidersResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaylistsResource returns the union data inside the TracksMultiDataRelationshipDocument_Included_Item as a PlaylistsResource
func (t TracksMultiDataRelationshipDocument_Included_Item) AsPlaylistsResource() (PlaylistsResource, error) {
	var body PlaylistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaylistsResource overwrites any union data inside the TracksMultiDataRelationshipDocument_Included_Item as the provided PlaylistsResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) FromPlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaylistsResource performs a merge with any union data inside the TracksMultiDataRelationshipDocument_Included_Item, using the provided PlaylistsResource
func (t *TracksMultiDataRelationshipDocument_Included_Item) MergePlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TracksMultiDataRelationshipDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TracksMultiDataRelationshipDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTracksResource returns the union data inside the TracksSingleDataDocument_Included_Item as a TracksResource
func (t TracksSingleDataDocument_Included_Item) AsTracksResource() (TracksResource, error) {
	var body TracksResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResource overwrites any union data inside the TracksSingleDataDocument_Included_Item as the provided TracksResource
func (t *TracksSingleDataDocument_Included_Item) FromTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResource performs a merge with any union data inside the TracksSingleDataDocument_Included_Item, using the provided TracksResource
func (t *TracksSingleDataDocument_Included_Item) MergeTracksResource(v TracksResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistsResource returns the union data inside the TracksSingleDataDocument_Included_Item as a ArtistsResource
func (t TracksSingleDataDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the TracksSingleDataDocument_Included_Item as the provided ArtistsResource
func (t *TracksSingleDataDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the TracksSingleDataDocument_Included_Item, using the provided ArtistsResource
func (t *TracksSingleDataDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the TracksSingleDataDocument_Included_Item as a AlbumsResource
func (t TracksSingleDataDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the TracksSingleDataDocument_Included_Item as the provided AlbumsResource
func (t *TracksSingleDataDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the TracksSingleDataDocument_Included_Item, using the provided AlbumsResource
func (t *TracksSingleDataDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResource returns the union data inside the TracksSingleDataDocument_Included_Item as a ProvidersResource
func (t TracksSingleDataDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the TracksSingleDataDocument_Included_Item as the provided ProvidersResource
func (t *TracksSingleDataDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the TracksSingleDataDocument_Included_Item, using the provided ProvidersResource
func (t *TracksSingleDataDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaylistsResource returns the union data inside the TracksSingleDataDocument_Included_Item as a PlaylistsResource
func (t TracksSingleDataDocument_Included_Item) AsPlaylistsResource() (PlaylistsResource, error) {
	var body PlaylistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaylistsResource overwrites any union data inside the TracksSingleDataDocument_Included_Item as the provided PlaylistsResource
func (t *TracksSingleDataDocument_Included_Item) FromPlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaylistsResource performs a merge with any union data inside the TracksSingleDataDocument_Included_Item, using the provided PlaylistsResource
func (t *TracksSingleDataDocument_Included_Item) MergePlaylistsResource(v PlaylistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TracksSingleDataDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TracksSingleDataDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProvidersResource returns the union data inside the VideosMultiDataDocument_Included_Item as a ProvidersResource
func (t VideosMultiDataDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the VideosMultiDataDocument_Included_Item as the provided ProvidersResource
func (t *VideosMultiDataDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the VideosMultiDataDocument_Included_Item, using the provided ProvidersResource
func (t *VideosMultiDataDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the VideosMultiDataDocument_Included_Item as a AlbumsResource
func (t VideosMultiDataDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the VideosMultiDataDocument_Included_Item as the provided AlbumsResource
func (t *VideosMultiDataDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the VideosMultiDataDocument_Included_Item, using the provided AlbumsResource
func (t *VideosMultiDataDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistsResource returns the union data inside the VideosMultiDataDocument_Included_Item as a ArtistsResource
func (t VideosMultiDataDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the VideosMultiDataDocument_Included_Item as the provided ArtistsResource
func (t *VideosMultiDataDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the VideosMultiDataDocument_Included_Item, using the provided ArtistsResource
func (t *VideosMultiDataDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VideosMultiDataDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VideosMultiDataDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProvidersResource returns the union data inside the VideosMultiDataRelationshipDocument_Included_Item as a ProvidersResource
func (t VideosMultiDataRelationshipDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the VideosMultiDataRelationshipDocument_Included_Item as the provided ProvidersResource
func (t *VideosMultiDataRelationshipDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the VideosMultiDataRelationshipDocument_Included_Item, using the provided ProvidersResource
func (t *VideosMultiDataRelationshipDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the VideosMultiDataRelationshipDocument_Included_Item as a AlbumsResource
func (t VideosMultiDataRelationshipDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the VideosMultiDataRelationshipDocument_Included_Item as the provided AlbumsResource
func (t *VideosMultiDataRelationshipDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the VideosMultiDataRelationshipDocument_Included_Item, using the provided AlbumsResource
func (t *VideosMultiDataRelationshipDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistsResource returns the union data inside the VideosMultiDataRelationshipDocument_Included_Item as a ArtistsResource
func (t VideosMultiDataRelationshipDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the VideosMultiDataRelationshipDocument_Included_Item as the provided ArtistsResource
func (t *VideosMultiDataRelationshipDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the VideosMultiDataRelationshipDocument_Included_Item, using the provided ArtistsResource
func (t *VideosMultiDataRelationshipDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVideosResource returns the union data inside the VideosMultiDataRelationshipDocument_Included_Item as a VideosResource
func (t VideosMultiDataRelationshipDocument_Included_Item) AsVideosResource() (VideosResource, error) {
	var body VideosResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideosResource overwrites any union data inside the VideosMultiDataRelationshipDocument_Included_Item as the provided VideosResource
func (t *VideosMultiDataRelationshipDocument_Included_Item) FromVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideosResource performs a merge with any union data inside the VideosMultiDataRelationshipDocument_Included_Item, using the provided VideosResource
func (t *VideosMultiDataRelationshipDocument_Included_Item) MergeVideosResource(v VideosResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VideosMultiDataRelationshipDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VideosMultiDataRelationshipDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProvidersResource returns the union data inside the VideosSingleDataDocument_Included_Item as a ProvidersResource
func (t VideosSingleDataDocument_Included_Item) AsProvidersResource() (ProvidersResource, error) {
	var body ProvidersResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResource overwrites any union data inside the VideosSingleDataDocument_Included_Item as the provided ProvidersResource
func (t *VideosSingleDataDocument_Included_Item) FromProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResource performs a merge with any union data inside the VideosSingleDataDocument_Included_Item, using the provided ProvidersResource
func (t *VideosSingleDataDocument_Included_Item) MergeProvidersResource(v ProvidersResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAlbumsResource returns the union data inside the VideosSingleDataDocument_Included_Item as a AlbumsResource
func (t VideosSingleDataDocument_Included_Item) AsAlbumsResource() (AlbumsResource, error) {
	var body AlbumsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResource overwrites any union data inside the VideosSingleDataDocument_Included_Item as the provided AlbumsResource
func (t *VideosSingleDataDocument_Included_Item) FromAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResource performs a merge with any union data inside the VideosSingleDataDocument_Included_Item, using the provided AlbumsResource
func (t *VideosSingleDataDocument_Included_Item) MergeAlbumsResource(v AlbumsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistsResource returns the union data inside the VideosSingleDataDocument_Included_Item as a ArtistsResource
func (t VideosSingleDataDocument_Included_Item) AsArtistsResource() (ArtistsResource, error) {
	var body ArtistsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResource overwrites any union data inside the VideosSingleDataDocument_Included_Item as the provided ArtistsResource
func (t *VideosSingleDataDocument_Included_Item) FromArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResource performs a merge with any union data inside the VideosSingleDataDocument_Included_Item, using the provided ArtistsResource
func (t *VideosSingleDataDocument_Included_Item) MergeArtistsResource(v ArtistsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VideosSingleDataDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VideosSingleDataDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAlbums request
	GetAlbums(ctx context.Context, params *GetAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsId request
	GetAlbumsId(ctx context.Context, id string, params *GetAlbumsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsArtists request
	GetAlbumsIdRelationshipsArtists(ctx context.Context, id string, params *GetAlbumsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsItems request
	GetAlbumsIdRelationshipsItems(ctx context.Context, id string, params *GetAlbumsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsProviders request
	GetAlbumsIdRelationshipsProviders(ctx context.Context, id string, params *GetAlbumsIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsSimilarAlbums request
	GetAlbumsIdRelationshipsSimilarAlbums(ctx context.Context, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistRoles request
	GetArtistRoles(ctx context.Context, params *GetArtistRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistRolesId request
	GetArtistRolesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtists request
	GetArtists(ctx context.Context, params *GetArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsId request
	GetArtistsId(ctx context.Context, id string, params *GetArtistsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsAlbums request
	GetArtistsIdRelationshipsAlbums(ctx context.Context, id string, params *GetArtistsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsRadio request
	GetArtistsIdRelationshipsRadio(ctx context.Context, id string, params *GetArtistsIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsRoles request
	GetArtistsIdRelationshipsRoles(ctx context.Context, id string, params *GetArtistsIdRelationshipsRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsSimilarArtists request
	GetArtistsIdRelationshipsSimilarArtists(ctx context.Context, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsTrackProviders request
	GetArtistsIdRelationshipsTrackProviders(ctx context.Context, id string, params *GetArtistsIdRelationshipsTrackProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsTracks request
	GetArtistsIdRelationshipsTracks(ctx context.Context, id string, params *GetArtistsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsVideos request
	GetArtistsIdRelationshipsVideos(ctx context.Context, id string, params *GetArtistsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviders request
	GetProviders(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvidersId request
	GetProvidersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracks request
	GetTracks(ctx context.Context, params *GetTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksId request
	GetTracksId(ctx context.Context, id string, params *GetTracksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsAlbums request
	GetTracksIdRelationshipsAlbums(ctx context.Context, id string, params *GetTracksIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsArtists request
	GetTracksIdRelationshipsArtists(ctx context.Context, id string, params *GetTracksIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsProviders request
	GetTracksIdRelationshipsProviders(ctx context.Context, id string, params *GetTracksIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsRadio request
	GetTracksIdRelationshipsRadio(ctx context.Context, id string, params *GetTracksIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsSimilarTracks request
	GetTracksIdRelationshipsSimilarTracks(ctx context.Context, id string, params *GetTracksIdRelationshipsSimilarTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideos request
	GetVideos(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosId request
	GetVideosId(ctx context.Context, id string, params *GetVideosIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosIdRelationshipsAlbums request
	GetVideosIdRelationshipsAlbums(ctx context.Context, id string, params *GetVideosIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosIdRelationshipsArtists request
	GetVideosIdRelationshipsArtists(ctx context.Context, id string, params *GetVideosIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosIdRelationshipsProviders request
	GetVideosIdRelationshipsProviders(ctx context.Context, id string, params *GetVideosIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAlbums(ctx context.Context, params *GetAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsId(ctx context.Context, id string, params *GetAlbumsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsArtists(ctx context.Context, id string, params *GetAlbumsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsItems(ctx context.Context, id string, params *GetAlbumsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsItemsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsProviders(ctx context.Context, id string, params *GetAlbumsIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsProvidersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsSimilarAlbums(ctx context.Context, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsSimilarAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistRoles(ctx context.Context, params *GetArtistRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistRolesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistRolesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtists(ctx context.Context, params *GetArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsId(ctx context.Context, id string, params *GetArtistsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsAlbums(ctx context.Context, id string, params *GetArtistsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsRadio(ctx context.Context, id string, params *GetArtistsIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsRadioRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsRoles(ctx context.Context, id string, params *GetArtistsIdRelationshipsRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsRolesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsSimilarArtists(ctx context.Context, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsSimilarArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsTrackProviders(ctx context.Context, id string, params *GetArtistsIdRelationshipsTrackProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsTrackProvidersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsTracks(ctx context.Context, id string, params *GetArtistsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsTracksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsVideos(ctx context.Context, id string, params *GetArtistsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsVideosRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviders(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvidersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracks(ctx context.Context, params *GetTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksId(ctx context.Context, id string, params *GetTracksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsAlbums(ctx context.Context, id string, params *GetTracksIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsArtists(ctx context.Context, id string, params *GetTracksIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsProviders(ctx context.Context, id string, params *GetTracksIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsProvidersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsRadio(ctx context.Context, id string, params *GetTracksIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsRadioRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsSimilarTracks(ctx context.Context, id string, params *GetTracksIdRelationshipsSimilarTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsSimilarTracksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideos(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosId(ctx context.Context, id string, params *GetVideosIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosIdRelationshipsAlbums(ctx context.Context, id string, params *GetVideosIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRelationshipsAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosIdRelationshipsArtists(ctx context.Context, id string, params *GetVideosIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRelationshipsArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosIdRelationshipsProviders(ctx context.Context, id string, params *GetVideosIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRelationshipsProvidersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAlbumsRequest generates requests for GetAlbums
func NewGetAlbumsRequest(server string, params *GetAlbumsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterBarcodeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[barcodeId]", runtime.ParamLocationQuery, *params.FilterBarcodeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRequest generates requests for GetAlbumsId
func NewGetAlbumsIdRequest(server string, id string, params *GetAlbumsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsArtistsRequest generates requests for GetAlbumsIdRelationshipsArtists
func NewGetAlbumsIdRelationshipsArtistsRequest(server string, id string, params *GetAlbumsIdRelationshipsArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsItemsRequest generates requests for GetAlbumsIdRelationshipsItems
func NewGetAlbumsIdRelationshipsItemsRequest(server string, id string, params *GetAlbumsIdRelationshipsItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsProvidersRequest generates requests for GetAlbumsIdRelationshipsProviders
func NewGetAlbumsIdRelationshipsProvidersRequest(server string, id string, params *GetAlbumsIdRelationshipsProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsSimilarAlbumsRequest generates requests for GetAlbumsIdRelationshipsSimilarAlbums
func NewGetAlbumsIdRelationshipsSimilarAlbumsRequest(server string, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/similarAlbums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistRolesRequest generates requests for GetArtistRoles
func NewGetArtistRolesRequest(server string, params *GetArtistRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistRoles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistRolesIdRequest generates requests for GetArtistRolesId
func NewGetArtistRolesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistRoles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsRequest generates requests for GetArtists
func NewGetArtistsRequest(server string, params *GetArtistsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRequest generates requests for GetArtistsId
func NewGetArtistsIdRequest(server string, id string, params *GetArtistsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsAlbumsRequest generates requests for GetArtistsIdRelationshipsAlbums
func NewGetArtistsIdRelationshipsAlbumsRequest(server string, id string, params *GetArtistsIdRelationshipsAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsRadioRequest generates requests for GetArtistsIdRelationshipsRadio
func NewGetArtistsIdRelationshipsRadioRequest(server string, id string, params *GetArtistsIdRelationshipsRadioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/radio", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsRolesRequest generates requests for GetArtistsIdRelationshipsRoles
func NewGetArtistsIdRelationshipsRolesRequest(server string, id string, params *GetArtistsIdRelationshipsRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsSimilarArtistsRequest generates requests for GetArtistsIdRelationshipsSimilarArtists
func NewGetArtistsIdRelationshipsSimilarArtistsRequest(server string, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/similarArtists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsTrackProvidersRequest generates requests for GetArtistsIdRelationshipsTrackProviders
func NewGetArtistsIdRelationshipsTrackProvidersRequest(server string, id string, params *GetArtistsIdRelationshipsTrackProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/trackProviders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsTracksRequest generates requests for GetArtistsIdRelationshipsTracks
func NewGetArtistsIdRelationshipsTracksRequest(server string, id string, params *GetArtistsIdRelationshipsTracksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/tracks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collapseBy", runtime.ParamLocationQuery, params.CollapseBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsVideosRequest generates requests for GetArtistsIdRelationshipsVideos
func NewGetArtistsIdRelationshipsVideosRequest(server string, id string, params *GetArtistsIdRelationshipsVideosParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProvidersRequest generates requests for GetProviders
func NewGetProvidersRequest(server string, params *GetProvidersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProvidersIdRequest generates requests for GetProvidersId
func NewGetProvidersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksRequest generates requests for GetTracks
func NewGetTracksRequest(server string, params *GetTracksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIsrc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[isrc]", runtime.ParamLocationQuery, *params.FilterIsrc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRequest generates requests for GetTracksId
func NewGetTracksIdRequest(server string, id string, params *GetTracksIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsAlbumsRequest generates requests for GetTracksIdRelationshipsAlbums
func NewGetTracksIdRelationshipsAlbumsRequest(server string, id string, params *GetTracksIdRelationshipsAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsArtistsRequest generates requests for GetTracksIdRelationshipsArtists
func NewGetTracksIdRelationshipsArtistsRequest(server string, id string, params *GetTracksIdRelationshipsArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsProvidersRequest generates requests for GetTracksIdRelationshipsProviders
func NewGetTracksIdRelationshipsProvidersRequest(server string, id string, params *GetTracksIdRelationshipsProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsRadioRequest generates requests for GetTracksIdRelationshipsRadio
func NewGetTracksIdRelationshipsRadioRequest(server string, id string, params *GetTracksIdRelationshipsRadioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/radio", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsSimilarTracksRequest generates requests for GetTracksIdRelationshipsSimilarTracks
func NewGetTracksIdRelationshipsSimilarTracksRequest(server string, id string, params *GetTracksIdRelationshipsSimilarTracksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/similarTracks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosRequest generates requests for GetVideos
func NewGetVideosRequest(server string, params *GetVideosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIsrc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[isrc]", runtime.ParamLocationQuery, *params.FilterIsrc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRequest generates requests for GetVideosId
func NewGetVideosIdRequest(server string, id string, params *GetVideosIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRelationshipsAlbumsRequest generates requests for GetVideosIdRelationshipsAlbums
func NewGetVideosIdRelationshipsAlbumsRequest(server string, id string, params *GetVideosIdRelationshipsAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRelationshipsArtistsRequest generates requests for GetVideosIdRelationshipsArtists
func NewGetVideosIdRelationshipsArtistsRequest(server string, id string, params *GetVideosIdRelationshipsArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRelationshipsProvidersRequest generates requests for GetVideosIdRelationshipsProviders
func NewGetVideosIdRelationshipsProvidersRequest(server string, id string, params *GetVideosIdRelationshipsProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s/relationships/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAlbumsWithResponse request
	GetAlbumsWithResponse(ctx context.Context, params *GetAlbumsParams, reqEditors ...RequestEditorFn) (*GetAlbumsResponse, error)

	// GetAlbumsIdWithResponse request
	GetAlbumsIdWithResponse(ctx context.Context, id string, params *GetAlbumsIdParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdResponse, error)

	// GetAlbumsIdRelationshipsArtistsWithResponse request
	GetAlbumsIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsArtistsResponse, error)

	// GetAlbumsIdRelationshipsItemsWithResponse request
	GetAlbumsIdRelationshipsItemsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsItemsResponse, error)

	// GetAlbumsIdRelationshipsProvidersWithResponse request
	GetAlbumsIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsProvidersResponse, error)

	// GetAlbumsIdRelationshipsSimilarAlbumsWithResponse request
	GetAlbumsIdRelationshipsSimilarAlbumsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsSimilarAlbumsResponse, error)

	// GetArtistRolesWithResponse request
	GetArtistRolesWithResponse(ctx context.Context, params *GetArtistRolesParams, reqEditors ...RequestEditorFn) (*GetArtistRolesResponse, error)

	// GetArtistRolesIdWithResponse request
	GetArtistRolesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetArtistRolesIdResponse, error)

	// GetArtistsWithResponse request
	GetArtistsWithResponse(ctx context.Context, params *GetArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistsResponse, error)

	// GetArtistsIdWithResponse request
	GetArtistsIdWithResponse(ctx context.Context, id string, params *GetArtistsIdParams, reqEditors ...RequestEditorFn) (*GetArtistsIdResponse, error)

	// GetArtistsIdRelationshipsAlbumsWithResponse request
	GetArtistsIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsAlbumsResponse, error)

	// GetArtistsIdRelationshipsRadioWithResponse request
	GetArtistsIdRelationshipsRadioWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsRadioResponse, error)

	// GetArtistsIdRelationshipsRolesWithResponse request
	GetArtistsIdRelationshipsRolesWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsRolesParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsRolesResponse, error)

	// GetArtistsIdRelationshipsSimilarArtistsWithResponse request
	GetArtistsIdRelationshipsSimilarArtistsWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsSimilarArtistsResponse, error)

	// GetArtistsIdRelationshipsTrackProvidersWithResponse request
	GetArtistsIdRelationshipsTrackProvidersWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsTrackProvidersParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsTrackProvidersResponse, error)

	// GetArtistsIdRelationshipsTracksWithResponse request
	GetArtistsIdRelationshipsTracksWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsTracksResponse, error)

	// GetArtistsIdRelationshipsVideosWithResponse request
	GetArtistsIdRelationshipsVideosWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsVideosResponse, error)

	// GetProvidersWithResponse request
	GetProvidersWithResponse(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error)

	// GetProvidersIdWithResponse request
	GetProvidersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProvidersIdResponse, error)

	// GetTracksWithResponse request
	GetTracksWithResponse(ctx context.Context, params *GetTracksParams, reqEditors ...RequestEditorFn) (*GetTracksResponse, error)

	// GetTracksIdWithResponse request
	GetTracksIdWithResponse(ctx context.Context, id string, params *GetTracksIdParams, reqEditors ...RequestEditorFn) (*GetTracksIdResponse, error)

	// GetTracksIdRelationshipsAlbumsWithResponse request
	GetTracksIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsAlbumsResponse, error)

	// GetTracksIdRelationshipsArtistsWithResponse request
	GetTracksIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsArtistsResponse, error)

	// GetTracksIdRelationshipsProvidersWithResponse request
	GetTracksIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsProvidersResponse, error)

	// GetTracksIdRelationshipsRadioWithResponse request
	GetTracksIdRelationshipsRadioWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsRadioResponse, error)

	// GetTracksIdRelationshipsSimilarTracksWithResponse request
	GetTracksIdRelationshipsSimilarTracksWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsSimilarTracksParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsSimilarTracksResponse, error)

	// GetVideosWithResponse request
	GetVideosWithResponse(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*GetVideosResponse, error)

	// GetVideosIdWithResponse request
	GetVideosIdWithResponse(ctx context.Context, id string, params *GetVideosIdParams, reqEditors ...RequestEditorFn) (*GetVideosIdResponse, error)

	// GetVideosIdRelationshipsAlbumsWithResponse request
	GetVideosIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsAlbumsResponse, error)

	// GetVideosIdRelationshipsArtistsWithResponse request
	GetVideosIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsArtistsResponse, error)

	// GetVideosIdRelationshipsProvidersWithResponse request
	GetVideosIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsProvidersResponse, error)
}

type GetAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsSingleDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsSimilarAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsSimilarAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsSimilarAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistRolesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistRolesMultiDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistRolesIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistRolesSingleDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistRolesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistRolesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsSingleDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsRadioResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsRadioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsRadioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsRolesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsSimilarArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsSimilarArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsSimilarArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsTrackProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsTrackProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsTrackProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsVideosResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ProvidersMultiDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ProvidersSingleDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetProvidersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksSingleDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetTracksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsRadioResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsRadioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsRadioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsSimilarTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsSimilarTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsSimilarTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosSingleDataDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetVideosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetVideosIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetVideosIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdRelationshipsProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiDataRelationshipDocument
	ApplicationvndApiJSON400 *ErrorDocument
	ApplicationvndApiJSON404 *ErrorDocument
	ApplicationvndApiJSON405 *ErrorDocument
	ApplicationvndApiJSON406 *ErrorDocument
	ApplicationvndApiJSON415 *ErrorDocument
	ApplicationvndApiJSON451 *ErrorDocument
	ApplicationvndApiJSON500 *ErrorDocument
}

// Status returns HTTPResponse.Status
func (r GetVideosIdRelationshipsProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdRelationshipsProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAlbumsWithResponse request returning *GetAlbumsResponse
func (c *ClientWithResponses) GetAlbumsWithResponse(ctx context.Context, params *GetAlbumsParams, reqEditors ...RequestEditorFn) (*GetAlbumsResponse, error) {
	rsp, err := c.GetAlbums(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsResponse(rsp)
}

// GetAlbumsIdWithResponse request returning *GetAlbumsIdResponse
func (c *ClientWithResponses) GetAlbumsIdWithResponse(ctx context.Context, id string, params *GetAlbumsIdParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdResponse, error) {
	rsp, err := c.GetAlbumsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdResponse(rsp)
}

// GetAlbumsIdRelationshipsArtistsWithResponse request returning *GetAlbumsIdRelationshipsArtistsResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsArtistsResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsArtistsResponse(rsp)
}

// GetAlbumsIdRelationshipsItemsWithResponse request returning *GetAlbumsIdRelationshipsItemsResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsItemsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsItemsResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsItems(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsItemsResponse(rsp)
}

// GetAlbumsIdRelationshipsProvidersWithResponse request returning *GetAlbumsIdRelationshipsProvidersResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsProvidersResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsProviders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsProvidersResponse(rsp)
}

// GetAlbumsIdRelationshipsSimilarAlbumsWithResponse request returning *GetAlbumsIdRelationshipsSimilarAlbumsResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsSimilarAlbumsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsSimilarAlbumsResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsSimilarAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsSimilarAlbumsResponse(rsp)
}

// GetArtistRolesWithResponse request returning *GetArtistRolesResponse
func (c *ClientWithResponses) GetArtistRolesWithResponse(ctx context.Context, params *GetArtistRolesParams, reqEditors ...RequestEditorFn) (*GetArtistRolesResponse, error) {
	rsp, err := c.GetArtistRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistRolesResponse(rsp)
}

// GetArtistRolesIdWithResponse request returning *GetArtistRolesIdResponse
func (c *ClientWithResponses) GetArtistRolesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetArtistRolesIdResponse, error) {
	rsp, err := c.GetArtistRolesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistRolesIdResponse(rsp)
}

// GetArtistsWithResponse request returning *GetArtistsResponse
func (c *ClientWithResponses) GetArtistsWithResponse(ctx context.Context, params *GetArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistsResponse, error) {
	rsp, err := c.GetArtists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsResponse(rsp)
}

// GetArtistsIdWithResponse request returning *GetArtistsIdResponse
func (c *ClientWithResponses) GetArtistsIdWithResponse(ctx context.Context, id string, params *GetArtistsIdParams, reqEditors ...RequestEditorFn) (*GetArtistsIdResponse, error) {
	rsp, err := c.GetArtistsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdResponse(rsp)
}

// GetArtistsIdRelationshipsAlbumsWithResponse request returning *GetArtistsIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsAlbumsResponse(rsp)
}

// GetArtistsIdRelationshipsRadioWithResponse request returning *GetArtistsIdRelationshipsRadioResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsRadioWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsRadioResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsRadio(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsRadioResponse(rsp)
}

// GetArtistsIdRelationshipsRolesWithResponse request returning *GetArtistsIdRelationshipsRolesResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsRolesWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsRolesParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsRolesResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsRoles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsRolesResponse(rsp)
}

// GetArtistsIdRelationshipsSimilarArtistsWithResponse request returning *GetArtistsIdRelationshipsSimilarArtistsResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsSimilarArtistsWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsSimilarArtistsResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsSimilarArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsSimilarArtistsResponse(rsp)
}

// GetArtistsIdRelationshipsTrackProvidersWithResponse request returning *GetArtistsIdRelationshipsTrackProvidersResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsTrackProvidersWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsTrackProvidersParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsTrackProvidersResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsTrackProviders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsTrackProvidersResponse(rsp)
}

// GetArtistsIdRelationshipsTracksWithResponse request returning *GetArtistsIdRelationshipsTracksResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsTracksWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsTracksResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsTracks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsTracksResponse(rsp)
}

// GetArtistsIdRelationshipsVideosWithResponse request returning *GetArtistsIdRelationshipsVideosResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsVideosWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsVideosResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsVideos(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsVideosResponse(rsp)
}

// GetProvidersWithResponse request returning *GetProvidersResponse
func (c *ClientWithResponses) GetProvidersWithResponse(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error) {
	rsp, err := c.GetProviders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersResponse(rsp)
}

// GetProvidersIdWithResponse request returning *GetProvidersIdResponse
func (c *ClientWithResponses) GetProvidersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProvidersIdResponse, error) {
	rsp, err := c.GetProvidersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersIdResponse(rsp)
}

// GetTracksWithResponse request returning *GetTracksResponse
func (c *ClientWithResponses) GetTracksWithResponse(ctx context.Context, params *GetTracksParams, reqEditors ...RequestEditorFn) (*GetTracksResponse, error) {
	rsp, err := c.GetTracks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksResponse(rsp)
}

// GetTracksIdWithResponse request returning *GetTracksIdResponse
func (c *ClientWithResponses) GetTracksIdWithResponse(ctx context.Context, id string, params *GetTracksIdParams, reqEditors ...RequestEditorFn) (*GetTracksIdResponse, error) {
	rsp, err := c.GetTracksId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdResponse(rsp)
}

// GetTracksIdRelationshipsAlbumsWithResponse request returning *GetTracksIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsAlbumsResponse(rsp)
}

// GetTracksIdRelationshipsArtistsWithResponse request returning *GetTracksIdRelationshipsArtistsResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsArtistsResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsArtistsResponse(rsp)
}

// GetTracksIdRelationshipsProvidersWithResponse request returning *GetTracksIdRelationshipsProvidersResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsProvidersResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsProviders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsProvidersResponse(rsp)
}

// GetTracksIdRelationshipsRadioWithResponse request returning *GetTracksIdRelationshipsRadioResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsRadioWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsRadioResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsRadio(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsRadioResponse(rsp)
}

// GetTracksIdRelationshipsSimilarTracksWithResponse request returning *GetTracksIdRelationshipsSimilarTracksResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsSimilarTracksWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsSimilarTracksParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsSimilarTracksResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsSimilarTracks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsSimilarTracksResponse(rsp)
}

// GetVideosWithResponse request returning *GetVideosResponse
func (c *ClientWithResponses) GetVideosWithResponse(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*GetVideosResponse, error) {
	rsp, err := c.GetVideos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosResponse(rsp)
}

// GetVideosIdWithResponse request returning *GetVideosIdResponse
func (c *ClientWithResponses) GetVideosIdWithResponse(ctx context.Context, id string, params *GetVideosIdParams, reqEditors ...RequestEditorFn) (*GetVideosIdResponse, error) {
	rsp, err := c.GetVideosId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdResponse(rsp)
}

// GetVideosIdRelationshipsAlbumsWithResponse request returning *GetVideosIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) GetVideosIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.GetVideosIdRelationshipsAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdRelationshipsAlbumsResponse(rsp)
}

// GetVideosIdRelationshipsArtistsWithResponse request returning *GetVideosIdRelationshipsArtistsResponse
func (c *ClientWithResponses) GetVideosIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsArtistsResponse, error) {
	rsp, err := c.GetVideosIdRelationshipsArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdRelationshipsArtistsResponse(rsp)
}

// GetVideosIdRelationshipsProvidersWithResponse request returning *GetVideosIdRelationshipsProvidersResponse
func (c *ClientWithResponses) GetVideosIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsProvidersResponse, error) {
	rsp, err := c.GetVideosIdRelationshipsProviders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdRelationshipsProvidersResponse(rsp)
}

// ParseGetAlbumsResponse parses an HTTP response from a GetAlbumsWithResponse call
func ParseGetAlbumsResponse(rsp *http.Response) (*GetAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdResponse parses an HTTP response from a GetAlbumsIdWithResponse call
func ParseGetAlbumsIdResponse(rsp *http.Response) (*GetAlbumsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsSingleDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsArtistsResponse parses an HTTP response from a GetAlbumsIdRelationshipsArtistsWithResponse call
func ParseGetAlbumsIdRelationshipsArtistsResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsItemsResponse parses an HTTP response from a GetAlbumsIdRelationshipsItemsWithResponse call
func ParseGetAlbumsIdRelationshipsItemsResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsProvidersResponse parses an HTTP response from a GetAlbumsIdRelationshipsProvidersWithResponse call
func ParseGetAlbumsIdRelationshipsProvidersResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsSimilarAlbumsResponse parses an HTTP response from a GetAlbumsIdRelationshipsSimilarAlbumsWithResponse call
func ParseGetAlbumsIdRelationshipsSimilarAlbumsResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsSimilarAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsSimilarAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistRolesResponse parses an HTTP response from a GetArtistRolesWithResponse call
func ParseGetArtistRolesResponse(rsp *http.Response) (*GetArtistRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistRolesMultiDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistRolesIdResponse parses an HTTP response from a GetArtistRolesIdWithResponse call
func ParseGetArtistRolesIdResponse(rsp *http.Response) (*GetArtistRolesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistRolesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistRolesSingleDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsResponse parses an HTTP response from a GetArtistsWithResponse call
func ParseGetArtistsResponse(rsp *http.Response) (*GetArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdResponse parses an HTTP response from a GetArtistsIdWithResponse call
func ParseGetArtistsIdResponse(rsp *http.Response) (*GetArtistsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsSingleDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsAlbumsResponse parses an HTTP response from a GetArtistsIdRelationshipsAlbumsWithResponse call
func ParseGetArtistsIdRelationshipsAlbumsResponse(rsp *http.Response) (*GetArtistsIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsRadioResponse parses an HTTP response from a GetArtistsIdRelationshipsRadioWithResponse call
func ParseGetArtistsIdRelationshipsRadioResponse(rsp *http.Response) (*GetArtistsIdRelationshipsRadioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsRadioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsRolesResponse parses an HTTP response from a GetArtistsIdRelationshipsRolesWithResponse call
func ParseGetArtistsIdRelationshipsRolesResponse(rsp *http.Response) (*GetArtistsIdRelationshipsRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsSimilarArtistsResponse parses an HTTP response from a GetArtistsIdRelationshipsSimilarArtistsWithResponse call
func ParseGetArtistsIdRelationshipsSimilarArtistsResponse(rsp *http.Response) (*GetArtistsIdRelationshipsSimilarArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsSimilarArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsTrackProvidersResponse parses an HTTP response from a GetArtistsIdRelationshipsTrackProvidersWithResponse call
func ParseGetArtistsIdRelationshipsTrackProvidersResponse(rsp *http.Response) (*GetArtistsIdRelationshipsTrackProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsTrackProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsTracksResponse parses an HTTP response from a GetArtistsIdRelationshipsTracksWithResponse call
func ParseGetArtistsIdRelationshipsTracksResponse(rsp *http.Response) (*GetArtistsIdRelationshipsTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsVideosResponse parses an HTTP response from a GetArtistsIdRelationshipsVideosWithResponse call
func ParseGetArtistsIdRelationshipsVideosResponse(rsp *http.Response) (*GetArtistsIdRelationshipsVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetProvidersResponse parses an HTTP response from a GetProvidersWithResponse call
func ParseGetProvidersResponse(rsp *http.Response) (*GetProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvidersMultiDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetProvidersIdResponse parses an HTTP response from a GetProvidersIdWithResponse call
func ParseGetProvidersIdResponse(rsp *http.Response) (*GetProvidersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvidersSingleDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksResponse parses an HTTP response from a GetTracksWithResponse call
func ParseGetTracksResponse(rsp *http.Response) (*GetTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdResponse parses an HTTP response from a GetTracksIdWithResponse call
func ParseGetTracksIdResponse(rsp *http.Response) (*GetTracksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksSingleDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsAlbumsResponse parses an HTTP response from a GetTracksIdRelationshipsAlbumsWithResponse call
func ParseGetTracksIdRelationshipsAlbumsResponse(rsp *http.Response) (*GetTracksIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsArtistsResponse parses an HTTP response from a GetTracksIdRelationshipsArtistsWithResponse call
func ParseGetTracksIdRelationshipsArtistsResponse(rsp *http.Response) (*GetTracksIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsProvidersResponse parses an HTTP response from a GetTracksIdRelationshipsProvidersWithResponse call
func ParseGetTracksIdRelationshipsProvidersResponse(rsp *http.Response) (*GetTracksIdRelationshipsProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsRadioResponse parses an HTTP response from a GetTracksIdRelationshipsRadioWithResponse call
func ParseGetTracksIdRelationshipsRadioResponse(rsp *http.Response) (*GetTracksIdRelationshipsRadioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsRadioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsSimilarTracksResponse parses an HTTP response from a GetTracksIdRelationshipsSimilarTracksWithResponse call
func ParseGetTracksIdRelationshipsSimilarTracksResponse(rsp *http.Response) (*GetTracksIdRelationshipsSimilarTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsSimilarTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosResponse parses an HTTP response from a GetVideosWithResponse call
func ParseGetVideosResponse(rsp *http.Response) (*GetVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdResponse parses an HTTP response from a GetVideosIdWithResponse call
func ParseGetVideosIdResponse(rsp *http.Response) (*GetVideosIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosSingleDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdRelationshipsAlbumsResponse parses an HTTP response from a GetVideosIdRelationshipsAlbumsWithResponse call
func ParseGetVideosIdRelationshipsAlbumsResponse(rsp *http.Response) (*GetVideosIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdRelationshipsArtistsResponse parses an HTTP response from a GetVideosIdRelationshipsArtistsWithResponse call
func ParseGetVideosIdRelationshipsArtistsResponse(rsp *http.Response) (*GetVideosIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdRelationshipsProvidersResponse parses an HTTP response from a GetVideosIdRelationshipsProvidersWithResponse call
func ParseGetVideosIdRelationshipsProvidersResponse(rsp *http.Response) (*GetVideosIdRelationshipsProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdRelationshipsProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiDataRelationshipDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 451:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON451 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}
